{
  "openapi": "3.0.0",
  "info": {
    "title": "Todo API with Authentication",
    "version": "1.0.0",
    "description": "A Koa.js TypeScript backend application for a collaborative todo list with user authentication using PostgreSQL and Prisma ORM.",
    "contact": {
      "name": "API Support",
      "email": "support@todoapi.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.namanh.id.vn",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "User last update date"
          }
        }
      },
      "Todo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Todo ID"
          },
          "title": {
            "type": "string",
            "description": "Todo title"
          },
          "description": {
            "type": "string",
            "description": "Todo description"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date for the todo"
          },
          "reminderDate": {
            "type": "string",
            "format": "date-time",
            "description": "Reminder date for the todo"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED"
            ],
            "description": "Todo status"
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Todo priority"
          },
          "starred": {
            "type": "boolean",
            "description": "Whether the todo is starred"
          },
          "creatorId": {
            "type": "integer",
            "description": "User ID who created this todo"
          },
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "Users assigned to this todo"
          },
          "subtasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtask"
            },
            "description": "Subtasks for this todo"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Todo creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Todo last update date"
          }
        }
      },
      "Subtask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Subtask ID"
          },
          "title": {
            "type": "string",
            "description": "Subtask title"
          },
          "completed": {
            "type": "boolean",
            "description": "Subtask completion status"
          },
          "todoId": {
            "type": "integer",
            "description": "Todo ID this subtask belongs to"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password (minimum 6 characters)"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "description": "User password"
          }
        }
      },
      "CreateTodoRequest": {
        "type": "object",
        "required": [
          "title",
          "dueDate"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Todo title"
          },
          "description": {
            "type": "string",
            "description": "Todo description"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date for the todo"
          },
          "reminderDate": {
            "type": "string",
            "format": "date-time",
            "description": "Reminder date for the todo"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED"
            ],
            "description": "Todo status",
            "default": "PENDING"
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Todo priority",
            "default": "MEDIUM"
          },
          "starred": {
            "type": "boolean",
            "description": "Whether the todo is starred",
            "default": false
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of user IDs to assign this todo to"
          },
          "subtasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Subtask title"
                },
                "completed": {
                  "type": "boolean",
                  "description": "Subtask completion status",
                  "default": false
                }
              },
              "required": [
                "title"
              ]
            },
            "description": "Subtasks for this todo"
          }
        }
      },
      "UpdateTodoRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Todo title"
          },
          "description": {
            "type": "string",
            "description": "Todo description"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date for the todo"
          },
          "reminderDate": {
            "type": "string",
            "format": "date-time",
            "description": "Reminder date for the todo"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED"
            ],
            "description": "Todo status"
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Todo priority"
          },
          "starred": {
            "type": "boolean",
            "description": "Whether the todo is starred"
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of user IDs to assign this todo to"
          },
          "subtasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Subtask ID (for updating existing subtasks)"
                },
                "title": {
                  "type": "string",
                  "description": "Subtask title"
                },
                "completed": {
                  "type": "boolean",
                  "description": "Subtask completion status"
                }
              },
              "required": [
                "title"
              ]
            },
            "description": "Subtasks for this todo"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "type": "string",
            "description": "JWT token"
          }
        }
      },
      "TodoResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "todo": {
            "$ref": "#/components/schemas/Todo"
          }
        }
      },
      "TodosResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "todos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Todo"
            }
          },
          "filters": {
            "type": "object",
            "description": "Applied filters (for debugging)",
            "properties": {
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "assignedTo": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "starred": {
                "type": "boolean"
              },
              "priority": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Create a new user account with username, email, and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Login user",
        "description": "Authenticate user with email and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "Logout user",
        "description": "Logout user (client-side token removal)",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/todos": {
      "get": {
        "summary": "Get all todos",
        "description": "Retrieve all todos with user information and optional filtering",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "all",
                  "PENDING",
                  "IN_PROGRESS",
                  "COMPLETED"
                ]
              }
            },
            "style": "form",
            "explode": false,
            "description": "Filter by status (comma-separated for multiple values)",
            "example": "PENDING,IN_PROGRESS"
          },
          {
            "in": "query",
            "name": "assignedTo",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "style": "form",
            "explode": false,
            "description": "Filter by assigned user IDs (comma-separated for multiple values)",
            "example": "1,2,3"
          },
          {
            "in": "query",
            "name": "starred",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by starred status",
            "example": true
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "HIGH",
                  "MEDIUM",
                  "LOW"
                ]
              }
            },
            "style": "form",
            "explode": false,
            "description": "Filter by priority (comma-separated for multiple values)",
            "example": "HIGH,MEDIUM"
          }
        ],
        "responses": {
          "200": {
            "description": "Todos retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodosResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new todo",
        "description": "Create a new todo for the authenticated user",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTodoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Todo created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/todos/{id}": {
      "get": {
        "summary": "Get specific todo by ID",
        "description": "Retrieve a specific todo by its ID",
        "tags": [
          "Todos"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Todo ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid todo ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Todo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update todo",
        "description": "Update a specific todo (only by the owner)",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Todo ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTodoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user can only edit their own todos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Todo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete todo",
        "description": "Delete a specific todo (only by the owner)",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Todo ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Todo deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid todo ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user can only delete their own todos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Todo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/my-todos": {
      "get": {
        "summary": "Get current user's todos",
        "description": "Retrieve todos belonging to the authenticated user",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User todos retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodosResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve all users for assignment and filtering purposes",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}